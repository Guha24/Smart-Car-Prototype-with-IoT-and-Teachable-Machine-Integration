#include <WiFi.h>
#include <WebServer.h>

// Replace with your network credentials
const char* ssid = "Paranar";
const char* password = "********;
#define ENA 5
#define ENB 18
// Motor control pins
#define IN1 12
#define IN2 14
#define IN3 27
#define IN4 26

const int freq = 30000;
const int ENA_CHANNEL = 0;
const int ENB_CHANNEL = 1;
const int resolution = 8;
int dutyCycle=150;

WebServer server(80);

void setup() {
  Serial.begin(115200);

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  pinMode(ENA,OUTPUT);
  pinMode(ENB,OUTPUT);
  
  

  ledcAttach(ENA, 50,resolution);
  ledcAttach(ENB, 50,resolution);
  
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("Connected. IP address: ");
  Serial.println(WiFi.localIP());

  server.on("/command", handleCommand);
  server.begin();
}

void loop() {
  server.handleClient();
}

void handleCommand() {
  if (!server.hasArg("move")) {
    server.send(400, "text/plain", "Missing move parameter");
    return;
  }

  String move = server.arg("move");
  Serial.print("Command: ");
  Serial.println(move);

  if (move == "forward") {
    forward();
  } else if (move == "backward") {
    backward();
  } else if (move == "left") {
    left();
  } else if (move == "right") {
    right();
  } else if (move == "stop") {
    stopMotors();
  }

  server.send(200, "text/plain", "OK");
}

void forward() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  ledcWrite(ENA, dutyCycle);
  ledcWrite(ENB,dutyCycle);
}

void backward() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  ledcWrite(ENA, dutyCycle);
  ledcWrite(ENB,dutyCycle);
}

void left() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  ledcWrite(ENA, dutyCycle);
  ledcWrite(ENB,dutyCycle);
}

void right() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  ledcWrite(ENA, dutyCycle);
  ledcWrite(ENB,dutyCycle);
}

void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  ledcWrite(ENA,dutyCycle);
  ledcWrite(ENB,dutyCycle);
}


